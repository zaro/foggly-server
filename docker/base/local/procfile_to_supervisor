#!/bin/bash

if [ "$(type -t procfile_comand)" != "function" ]; then
  function procfile_comand {
    echo "$@"
  }
fi

function procfile_entry_to_supervisor {
  NAME="$1"
  CMD="$2"
  FILE="/run/supervisor.d/Procfile_${NAME}.conf"
  echo "Supervisor entry [${NAME}]:'${CMD}'"
  COMMAND=$(procfile_comand "$CMD")
  printf "[program:${NAME}]\ncommand=${COMMAND}\ndirectory=/srv/home/www\n" > "${FILE}"
  printf "stdout_logfile = /srv/home/log/supervisor/${NAME}.log\nstdout_logfile_maxbytes = 10MB\nstdout_logfile_backups = 1\n" >> "${FILE}"
  printf "stderr_logfile = /srv/home/log/supervisor/${NAME}.error.log\nstderr_logfile_maxbytes = 10MB\nstderr_logfile_backups = 1\n" >> "${FILE}"
  printf "user = www-data\n" >> "${FILE}"
  procfile_entry_append "${FILE}" "${NAME}" "${CMD}"
}

if [ "$(type -t procfile_entry)" != "function" ]; then
  function procfile_entry {
    return 1
  }
fi

if [ "$(type -t procfile_entry_append)" != "function" ]; then
  function procfile_entry_append {
    return 0
  }
fi

if [ "$(type -t procfiles_clean)" != "function" ]; then
  function procfiles_clean {
    rm -f /run/supervisor.d/Procfile_*.conf
  }
fi

function procfile_process {
  if [ -r Procfile ]; then
    procfiles_clean
    while IFS='' read -r line || [[ -n "$line" ]]; do
        if [[ $line =~ ^([a-zA-Z0-9]+):[[:space:]]*(.*)$ ]]; then
            ENTRY_NAME="${BASH_REMATCH[1]}"
            ENTRY_TEXT="${BASH_REMATCH[2]}"
            if ! procfile_entry "${ENTRY_NAME}" "${ENTRY_TEXT}"; then
              procfile_entry_to_supervisor "${ENTRY_NAME}" "${ENTRY_TEXT}"
            fi
        fi
    done < Procfile
  fi
}
